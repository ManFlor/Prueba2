!pip install sqlalchemy
!pip install mysql-connector-python
!pip install pandas

import sqlalchemy as db

# este es el fichero para conectarnos a MySQL
class ConexionMySQL():
    def __init__(self, bd_servidor,bd_nombre,bd_usuario,bd_contrasenia):
        self.bd_servidor=bd_servidor
        self.bd_nombre=bd_nombre
        self.bd_usuario=bd_usuario
        self.bd_contrasenia=bd_contrasenia

    ## Función de conexión a MySQL
    def conectarMySQL(self):
        engine = db.create_engine(f"mysql+mysqlconnector://{self.bd_usuario}:{self.bd_contrasenia}@{self.bd_servidor}:3310/{self.bd_nombre}")
        conn=engine.connect()
        return conn

import pandas as pd

Cargar datos a dimMovie
Crearemos el objeto para conectarnos a la base de datos `db_movies_netflix_transact`, proporcionando nuestras credenciales.
#ConexionMySQL
## creando el objeto de la clase ConnetionMysql
db_movies_netflix_transact= ConexionMySQL(
                            "192.168.0.5",            ## Servidor
                            "db_movies_netflix_transact",   ## base de datos
                            "root",                 ## usuario
                            "root"                 ## contraseña
                            )

## llamar a la funcion de conexión a la base de datos
conn_movies_netflix_transact=db_movies_netflix_transact.conectarMySQL()
movies_data=pd.read_sql('SELECT movie.movieID as movieID, movie.movieTitle as title, movie.releaseDate as releaseDate, gender.name as gender , person.name as participantName, participant.participantRole as roleparticipant FROM movie  INNER JOIN participant  ON movie.movieID=participant.movieID INNER JOIN person ON person.personID = participant.personID INNER JOIN movie_gender  ON movie.movieID = movie_gender.movieID INNER JOIN gender  ON movie_gender.genderID = gender.genderID', con=conn_movies_netflix_transact) 
movies_data["movieID"]=movies_data["movieID"].astype('int')
movies_data
from sqlalchemy import create_engine, MetaData, Table, Date
from sqlalchemy.orm import sessionmaker
from datetime import date

# Replace these values with your actual database connection details
DATABASE_URL = "mysql+mysqlconnector://root:root@192.168.0.5:3310/dw_netflix"

engine = create_engine(DATABASE_URL)

metadata = MetaData()
dimMovie= Table('dimMovie', metadata, autoload_with=engine)

# Create a connection to the database
conn = engine.connect()



for i,movie in movie_data.iterrows():
    # Sample data to insert
    data_to_insert = {
        "movieID": movie["movieID"],
        "title": movie["title"],
        "releaseMovie": movie["releaseDate"],
        "gender": movie["gender"],
        "participantName": movie["roleparticipant"],
        "roleparticipant": movie["roleparticipant"],
        "awardMovie": movie["Award"],

    }

    try:
        # Insert data into the table
        ins = dimMovie.insert().values(data_to_insert)
        conn.execute(ins)
        print(conn)

        # Commit the transaction
        conn.commit()
        print("se envió el commit a la base  de datos")

    except Exception as e:
        # Handle exceptions
        print(f"Error: {e}")
        # Rollback the transactio

# Close the connection
conn.close()

## Insertamos valores para dimUser, extrayendo los datos del csv de usuarios

users=pd.read_csv("../data/users.csv", sep='|')
users
users["subscription"]
dimUser= Table('dimUser', metadata, autoload_with=engine)

# Create a connection to the database
conn = engine.connect()



for i,user in users.iterrows():
    # Sample data to insert
    data_to_insert = {
        "userID": user["idUser"],
        "username": user["username"],
        "country": user["country"],
        "subscription": user["subscription"]
    }

    try:
        # Insert data into the table
        ins = dimUser.insert().values(data_to_insert)
        conn.execute(ins)
        print(conn)

        # Commit the transaction
        conn.commit()
        print("se envió el commit a la base  de datos")

    except Exception as e:
        # Handle exceptions
        print(f"Error: {e}")
        # Rollback the transactio

# Close the connection
conn.close()

watchs_data=pd.merge(users_id,movies_id, how="cross")

import random
from datetime import datetime, timedelta
import random

def gen_rating():
    # Generar un número aleatorio entre 0 y 5 con 1 solo decimal
    numero_aleatorio = round(random.uniform(0, 5), 1)
    # Mostrar el número aleatorio
    return numero_aleatorio

def gen_timestamp():
    # Generar un timestamp aleatorio dentro de un rango específico
    start_date = datetime(2024, 1, 15)
    end_date = datetime(2024, 2, 12)

    # Calcular un valor aleatorio entre start_date y end_date
    random_date = start_date + timedelta(seconds=random.randint(0, int((end_date - start_date).total_seconds())))

    # Mostrar el timestamp aleatorio
    return random_date

watchs_data["rating"]=watchs_data["movieID"].apply(lambda x: gen_rating())
watchs_data["timestamp"]=watchs_data["idUser"].apply(lambda x: gen_timestamp())

watchs_data

FactWatchs= Table('FactWatchs', metadata, autoload_with=engine)

# Create a connection to the database
conn = engine.connect()



for i,watch in watchs_data.iterrows():
    # Sample data to insert
    data_to_insert = {
        "userID": watch["idUser"],
        "movieID": watch["movieID"],
        "rating": watch["rating"],
        "timestamp": watch["timestamp"],
    }

    try:
        # Insert data into the table
        ins = FactWatchs.insert().values(data_to_insert)
        conn.execute(ins)
        print(conn)

        # Commit the transaction
        conn.commit()
        print("se envió el commit a la base  de datos")

    except Exception as e:
        # Handle exceptions
        print(f"Error: {e}")
        # Rollback the transactio

# Close the connection
conn.close()

conn = engine.connect()
hechos_data=pd.read_sql('SELECT * FROM dimMovie', con=conn) 
hechos_data


